require 'ipaddr'


# ugh I hate monkeypatching but it makes the code way more readable
class String
  def unindent indent=''
    gsub(/^#{self[/\A\s*/]}/, indent)
  end
end


module Geolocal
  module Provider
    class Base
      def initialize params={}
        @config = params.merge(Geolocal.configuration.to_hash)
      end

      def config
        @config
      end

      def download
        # TODO: skip download if local files are new enough
        # TODO: provide a FORCE argument to force download anyway
        download_files
      end

      def update
        countries = config[:countries].merge(config[:countries]) { |name, country_codes|
          Array(country_codes).map(&:upcase).to_set
        }

        results = countries.merge(countries) { "" }

        read_ranges(countries) do |name,lo,hi|
          results[name] << "#{IPAddr.new(lo).to_i}..#{IPAddr.new(hi).to_i},\n"
        end

        File.open(config[:file], 'w') do |file|
          output(file, results)
        end
      end

      def output file, results
        names = results.keys

        file.write <<-EOL.unindent
          # This file is autogenerated

          # Defines #{names.map { |n| "#{config[:module]}::#{n}" }.join(', ')}
          #     and #{names.map { |n| "#{config[:module]}.in_#{n}?" }.join(', ')}

          module #{config[:module]}
        EOL

        names.each do |n|
          file.write <<-EOL.unindent('  ')
            def self.in_#{n}? addr
              num = addr.to_i
              #{n}.bsearch { |range| num > range.max ? 1 : num < range.min ? -1 : 0 }
            end
          EOL
        end
        file.write "end\n\n"

        results.each do |name, body|
          file.write <<-EOL.unindent
            #{config[:module]}::#{name} = [
              #{body}
            ]

          EOL
        end
      end
    end
  end
end
