class Geocode::Static::Provider
  def initialize params
    @provider = params[:provider]
    unless @provider
      require 'geocode/static/provider/db_ip' unless defined?(Geocode::Static::Provider::DB_IP)
      @provider = Geocode::Static::Provider::DB_IP.new(params)
    end
  end

  def generate
    ranges.merge!(ranges) { |name, countries|
      Array(countries).map(&:upcase).to_set
    }

    results = ranges.merge(ranges) { "" }

    @service.generate(ranges) { |lo, hi|
      results[name] << "#{lo.to_i}..#{hi.to_i},\n"
    }

    output(results)
  end


  # eek, is it time to use an erb template?
  def output results
    names = results.keys

    out = <<-EOL.gsub(/^      /, '')
      # This file is autogenerated by #{@config.path}

      Defines #{names.map { |n| "#{config.module}::#{n}" }.join(', ')}
          and #{names.map { |n| "#{config.module}.in_#{n}?" }.join(', ')}

      module #{config.module}
    EOL

    methods = names.map do |n|
      <<-EOL.gsub(/^      /, '')
        def self.in_#{n}? addr
          num = addr.to_i
          #{n}.bsearch { |range| num > range.max ? 1 : num < range.min ? -1 : 0 }
        end
      EOL
    end

    out << methods.join("\n")
    out << "end\n\n"

    definitions = results.map do |name, body|
      <<-EOL.gsub(/^      /, '')
      #{config.module}::#{name} = [
        #{body}
      ]

      EOL
    end

    out << definitions.join("\n")
    out
  end
end



require 'csv'

class Geocode::Static::Provider::GeoIP
  def download
    # go from here: http://db-ip.com/db/download/country
  end

  def process
    # why on earth doesn't CSV.new(STDIN).each work?  Slurping sux.

    CSV.new(STDIN.read, headers: false).each do |row|
      ranges.each do |name, countries|
        if countries.include?(row[2])
          yield IPAddr.new(row[0]), IPAddr.new(row[1])
        end
      end
    end

    results
  end
end
